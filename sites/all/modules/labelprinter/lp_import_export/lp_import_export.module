<?php
function lp_import_export_menu() {
  $items = array();
  $items['admin/content/import'] = array(
    'title' => t('Product import'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lp_import_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'lp_import_export.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/content/export'] = array(
    'title' => t('Product export'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lp_export_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'lp_import_export.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Batch operation
 */

function lp_import_export_process_import ($row, $fields, $categories, $tags, $vendors, $types, &$context) {
  global $user;
  $err_vend = false;
  $err_cat = false;
  $folder = drupal_realpath('public://import');
  $ext = array('jpeg', 'jpg', 'png', 'gif');
  $tags_vocabulary = taxonomy_vocabulary_machine_name_load('tags');
  if (isset($context['results']['total'])) {$context['results']['total']++;}  else {$context['results']['total'] = 1;}
  if((empty($row['field_brand']) || !isset($vendors[$row['field_brand']])) && $row['type']!='Модификации'){
    $err_vend = true;
  }
  if((empty($row['field_category']) || !isset($categories[$row['field_category']])) &&  ($row['type']!='Модификации' && $row['type']!='Аксессуар')){
    $err_cat = true;
  }
    if ($err_vend) {
      $context['results']['nobrand'][] = "{$row['model']}" . ' : ' . "{$row['field_brand'] }";
    }
    $error = empty($row['model'])
      || empty($row['type']) || !isset($types[$row['type']])
      || $err_cat;
    if ($error) {
      $context['results']['ignored'][] = "{$row['model']}";
     return;
    }

    $product = db_select('uc_products', 'p')
      ->fields('p')
      ->condition('p.model', $row['model'])
      ->execute()->fetch();

    if (empty($product)) {
      $node = new stdClass;
      $node->shippable = false;
      $node->language = 'ru';
      $node->uid = $user->uid;
      $node->type = $types[$row['type']];
      $new = true;
    } else {
      $node = node_load($product->nid);
      $new = false;
    }
    $related_fields = lp_import_export_get_related_fields();

    foreach ($row as $field => $value) {
      if(!empty($value) || $value == 0){
        switch ($fields[$field]['type']) {
          case 'meta':
            switch ($field) {
            case 'meta_title':
              $node->metatags['ru']['title']['value'] = $value;
              break;
            case 'meta_description':
              $node->metatags['ru']['description']['value'] = $value;
              break;

            default:

              break;
          }
          break;
          case 'raw':
            if ($field != 'type') $node->$field = $value;
            break;
          case 'text_textarea_with_summary':
          case 'text_textarea':
          if(trim($value) == '') break;
            $node->{$field}[LANGUAGE_NONE][0] = array(
              'value' => $value,
              'format' => 'full_html',
              );
          break;
          case 'text_textfield':
          case 'options_buttons':
          case 'number':
          $val_array = explode(';', $value);
          foreach ($val_array as $key => $val) {
            $val = trim($val);
            $node->{$field}[LANGUAGE_NONE][$key]['value'] = empty($val) ? null : $val;
          }
          break;
          case 'taxonomy_autocomplete' :
          case 'term_reference_tree' :
            switch ($field) {
            case 'field_brand':
              if (!$err_vend) $node->field_brand[LANGUAGE_NONE][0]['tid'] = $vendors[$value];
              break;
            case 'field_category':
              $node->field_category[LANGUAGE_NONE][0]['tid'] = $categories[$value];
              break;
            case 'field_tags':
            case 'field_series':
              $vocname = ($field == 'field_tags') ? 'tags' : 'series';
              $vid = ($field == 'field_tags') ? 1 : 4;
              $terms = explode(',', $value);
            $node->{$field}[LANGUAGE_NONE] = array();
            foreach ($terms as $term_name) {
              $term_name = trim($term_name);
              if (!isset($tags[$term_name])) {
                $term = taxonomy_get_term_by_name($term_name, $vocname);
                if (empty($term)) {
                  $term = new stdClass;
                  $term->vid = $vid;
                  $term->name = $term_name;
                  taxonomy_term_save($term);
                } else {
                  $term = array_shift($term);
                }
                $tags[$term_name] = $term->tid;
              }
              $node->{$field}[LANGUAGE_NONE][] = array('tid' => $tags[$term_name]);
            }
              break;

            default:
              # code...
              break;
          }
          break;
          case 'image_image':
          $images = explode(',', $value);
          foreach ($images as $key => $image) {
            $images[$key] = trim($image);
          }
          $newimages = FALSE;
          if (isset($node->uc_product_image[LANGUAGE_NONE]) && is_array($node->uc_product_image[LANGUAGE_NONE])) {
            if (count($node->uc_product_image[LANGUAGE_NONE]) < count($images)) {
              $newimages = TRUE;
              foreach ($images as $key => $image) {
                if ($key < count($node->uc_product_image[LANGUAGE_NONE])) {
                  unset($images[$key]);
                } else {
                  break;
                }
              }
            }
          }
            if (empty($node->uc_product_image) || $newimages) {
              foreach ($images as $key => $image) {
                $oldfile = db_select('file_managed', 'f')
                ->fields('f', array('fid'))
                ->condition('f.filename', $image)
                ->execute()
                ->fetchField();
                if (!empty($oldfile)) {
                  $file = file_load($oldfile);
                } else {

                $filepath = $folder . '/' . $image;
                if (file_exists($filepath)) {
                  $file = new stdClass;
                  $file->uid = $user->uid;
                  $file->uri = $filepath;
                  $file->filemime = file_get_mimetype($filepath);
                  $file->status = 1;

                  $file = file_copy($file, 'public://');
                  file_unmanaged_delete($filepath);
                }
              }
               if (isset($file)) $node->uc_product_image[LANGUAGE_NONE][] = (array) $file;
            }
          }
            break;
          default:
          if (in_array($field, $related_fields)) {
                $node_models = explode(',', $value);
                if (empty($node_models)) {
                    continue;
                }
                $models = array();
                foreach ($node_models as $node_model) {
                  $models[] = trim($node_model);
                }
                if (!empty($models)) {
                    $models = array_unique($models);
                  $query = db_select('uc_products', 'p')
                    ->fields('p', array('model', 'nid'))
                    ->condition('p.model', $models, 'IN')
                    ->execute();
                    $result = $query->fetchAllKeyed();
                  $vals = array();
                  foreach ($result as $nid) {
                    $vals[]['target_id'] = $nid;
                  }
                  $node->{$field}[LANGUAGE_NONE] = $vals;
                }


            break;
          }
            $node->{$field}[LANGUAGE_NONE][0]['value'] = empty($value) ? null : $value;
            break;
        }
      }
    }

    if($node->type == 'mod') $node->status = 0;
    node_save($node);
    if($node->type == 'mod'){
      $node = node_load($node->nid);
    $option = new stdClass;
      $option->aid = 1;
      $option->name = $node->title;
      $option->cost = $node->cost;
      $option->price = $node->sell_price;
     $opt_query = db_select('uc_product_as_attribute_option', 'u')
     ->fields('u', array('oid'))
     ->condition('u.nid', $node->nid)
     ->execute()
     ->fetchField();
     if(!empty($opt_query)) $option->oid = $opt_query;
      uc_attribute_option_save($option);
      uc_product_as_attribute_option_save($option->oid, $node->nid);
    }
    if (!isset($context['results']['created'])) $context['results']['created'] = 0;
    if (!isset($context['results']['updated'])) $context['results']['updated'] = 0;
    if ($new) {
      $context['results']['created']++;
    } else {
      $context['results']['updated']++;
    }

  }


function lp_import_export_process_import_finished ($success, $results, $operations) {

  drupal_set_message(t('@total products in file. @created products were created, @updated products were updated.', array(
    '@total' => $results['total'],
    '@created' => $results['created'],
    '@updated' => $results['updated'],
  )));
  if (!empty($results['ignored'])) {
    drupal_set_message(t('The following SKUs were ignored (row. model): !ignored', array(
      '!ignored' => '<br />' . implode('<br />', $results['ignored']),
    )), 'error');
  }
  if (!empty($results['nobrand'])) {
    drupal_set_message(t('The following SKUs has invalid brands (row. model): !nobrand', array(
      '!nobrand' => '<br />' . implode('<br />', $results['nobrand']),
    )), 'warning');
  }
}


function lp_import_export_get_related_fields() {
  return array('field_recommended', 'field_complect', 'field_accessories');
}

